/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
    Node* flatten(Node* head) {
        stack<Node *> s;
    
        Node * curr=head;
        Node * pre=nullptr;
        while(curr!=nullptr){
            //cout<<curr->val;
            if(curr->child==nullptr){
                pre=curr;
                curr=curr->next;
            }
            else {
                if(curr->next!=nullptr){
                    s.push(curr->next);
                }
                curr->next=curr->child;
                curr->child->prev=curr;
                curr->child=nullptr;
                pre=curr;
                curr=curr->next;
            }   

            while(curr == nullptr && !s.empty()){
                curr = s.top();
                s.pop();

                pre->next=curr;
                curr->prev=pre;

                pre=curr;
                curr=curr->next;
            }
        }
    
    return head;
    }
};
