class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        // BFS...
        int rotx[4] = {-1,1,0,0};
        int roty[4] = {0,0,-1,1};
        
        
        queue<pair<int,int>> q;
        int n = grid.size();
        int m = grid[0].size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if( grid[i][j] == 2 ){
                    q.push({i,j});
                }
            }
        }
        int time = 0;
        while( !q.empty() ){
            time++;
            int l = q.size();
            while( l-- ){
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                for(int i = 0; i < 4; i++){
                    int row = r + rotx[i];
                    int col = c + roty[i];
                    if( row >= 0 && row < n && col >= 0 && col < m && grid[row][col] == 1){
                        grid[row][col] = 2;
                        q.push({row,col});
                    }
                }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if( grid[i][j] == 1 ){
                    return -1;
                }
            }
        }
        return max(0,time-1);
    }
};
