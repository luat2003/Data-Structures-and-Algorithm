class MyCircularQueue {
public:
    int arr[1005];
    int siz;
    int front = 0;
    int rear = -1;
    int cnt = 0;
    MyCircularQueue(int k) {
        siz = k;
    }
    
    bool enQueue(int value) {
        if( (rear+1)%siz == front && cnt > 0){
            return false;
        }else{
            rear = (rear+1)%siz;
            arr[rear] = value;
            cnt++;
            return true;
        }
    }
    
    bool deQueue() {
        if( (rear+1)%siz == front && cnt <= 0){
            return false;
        }else{
            front = (front+1)%siz;
            cnt--;
            return true;
        }
    }
    
    int Front() {
        if( (rear+1)%siz == front && cnt == 0){
            return -1;
        }else{
            return arr[front];
        }
    }
    
    int Rear() {
        if( (rear+1)%siz == front && cnt == 0){
            return -1;
        }else{
            return arr[rear];
        }
    }
    
    bool isEmpty() {
        return (rear+1)%siz == front && cnt == 0;
    }
    
    bool isFull() {
        return (rear+1)%siz == front && cnt > 0;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
