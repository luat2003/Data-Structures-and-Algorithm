/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */


//Function to return a list containing the level order traversal in spiral form.
vector<int> findSpiral(Node *root)
{
    //Your code here
    if( root == NULL ){
        return {};
    }
    vector<int> res;
    queue<Node*> q;
    q.push(root);
    int h = 1;
    while(!q.empty()){
        int n = q.size();
        stack<int> st;
        while(n--){
            Node* tmp = q.front();
            q.pop();
            if( h%2 ){
                st.push(tmp->data);
            }else{
                res.push_back(tmp->data);
            }
            if( tmp->left ){
                q.push(tmp->left);
            }
            if( tmp->right ){
                q.push(tmp->right);
            }
        }
        if( h % 2 ){
            while( !st.empty() ){
                res.push_back(st.top());
                st.pop();
            }
        }
        h++;
        
    }
    return res;
}
