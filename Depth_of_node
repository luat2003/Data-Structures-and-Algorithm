/*
struct Node
{
    int data;
    struct Node *left;
    struct Node *right;

    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution
{
public:
    int depthOfOddLeaf(Node *root)
    {
        //code here
        if( root == NULL ){
            return 0;
        }else if( !(root->left) && !(root->right)){
            return 1;
        }
        int h = 1;
        int res = 0;
        queue<Node*> q;
        if( root->left ){
            q.push(root->left);
        }
        if( root->right ){
            q.push(root->right);
        }
        
        while( !q.empty() ){
            int n = q.size();
            h++;
            while(n--){
                Node* tmp = q.front();
                q.pop();
                if( tmp->left ){
                    q.push(tmp->left);
                }
                if( tmp->right ){
                    q.push(tmp->right);
                }
                if( !(tmp->left) && !(tmp->right)){
                    if( h%2 == 1 ){
                        res = h;
                    }
                }
            }
        }
        return res;
    }
};
