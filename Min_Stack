class MinStack {
public:
    vector<int> st ={};
    vector<int> Min ={};
    MinStack() {
        
    }
    
    void push(int val) {
        st.push_back(val);
        if( Min.empty() || val < Min.back()){
            Min.push_back(val);
        }else{
            Min.push_back(Min.back());
        }
    }
    
    void pop() {
        if( st.empty()){
            return;
        }else{
            st.pop_back();
            Min.pop_back();
        }
    }
    
    int top() {
        return st.back();
    }
    
    int getMin() {
          return Min.back();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
class MinStack {
public:
    stack<int> st;
    stack<int> Min;
    MinStack() {
        
    }
    
    void push(int val) {
        st.push(val);
        if( Min.empty() || val < Min.top()){
            Min.push(val);
        }else{
            Min.push(Min.top());
        }
    }
    
    void pop() {
        if( st.empty()){
            return;
        }else{
            st.pop();
            Min.pop();
        }
    }
    
    int top() {
        return st.top();
    }
    
    int getMin() {
          return Min.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
