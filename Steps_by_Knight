class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    int mx[8] = {-2,-2,-1,-1,1,1,2,2};
	    int my[8] = {-1,1,-2,2,-2,2,-1,1};
	    int dd[1005][1005];
	    memset(dd, 0, sizeof(dd));
	    queue<pair<int,int>> q;
	    q.push({KnightPos[0], KnightPos[1]});
	    while(!q.empty()){
	        int x = q.front().first;
	        int y = q.front().second;
	        int d = dd[x][y];
	        if( x == TargetPos[0] && y == TargetPos[1] ){
	            return d;
	        }
	        q.pop();
	        for(int i = 0; i < 8; i++){
	            int nx = x + mx[i];
	            int ny = y + my[i];
	            if( nx >= 1 && nx <= N && ny >= 1 && ny <= N && !dd[nx][ny]){
	                dd[nx][ny] = d+1;
	                q.push({nx,ny});
	            }
	        }
	    }
	    return dd[TargetPos[0]][TargetPos[1]];
	}
};
